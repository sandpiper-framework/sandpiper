// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// 0001_create-tables.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createTablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x06\xba\xac\x1d\x64\x91\x74\xd1\x14\x41\xf6\xe4\xb5\x99\xad\xb1\x8e\x9c\xda\x32\xb0\x39\x09\xb4\x34\x71\xd8\x48\xa4\x4a\x52\x71\xd5\xa7\x2f\x48\xc9\xb2\x7e\x68\x3b\x5b\x6c\x7d\x32\xc9\xe1\x0c\xe7\xfb\xe6\x4f\x57\x17\x03\xb8\x80\x47\x29\xfe\xc4\x48\xdf\x81\xa2\x3c\xce\x58\x86\xd2\xec\x4e\xa9\xa6\x1b\xaa\xb0\xb3\xfd\xc0\xb6\x92\x6a\x26\xf8\x1d\x4c\x24\x52\x8d\xc0\x38\xd3\x8c\x26\x10\x57\x17\x40\xd3\x4d\x82\x0a\x9e\x85\x04\x85\xf2\x0d\x25\x30\x0e\x94\x03\xa6\x99\x2e\x6a\xb1\xca\x06\xde\xc1\xa7\xeb\x4f\xd7\x1f\xaf\x6f\x3e\xfe\x72\x3b\x80\x8b\xab\x01\x0c\xbe\x90\xaf\x33\xff\xf3\x60\x30\x59\x92\x71\x40\x20\x78\x7a\x24\x95\xa6\x50\x8a\x04\x43\xe4\x79\x0a\xe3\x15\x10\x7f\xfd\x00\xc3\x01\xc0\x87\x4c\xb2\x94\xca\xe2\xc3\xa5\x59\x28\x8c\x04\x8f\xcd\x72\x30\xea\x6a\x49\x58\x84\xa1\x2e\x32\x97\x12\x1a\xa1\xfa\xf8\xcc\x12\x2c\xd5\xd8\x25\xd3\x98\xaa\x6a\xad\x14\x6a\x7b\x5e\x6d\x64\xac\x25\x6f\x97\x0d\x79\xbb\x4e\xa9\x7c\x45\x1d\x89\xac\x68\x6c\x66\x92\x45\xa8\x5e\x10\x75\xb5\x49\xa5\x56\x99\x14\xa5\xb2\xde\xa3\x91\x47\x22\x66\x7c\xeb\x78\xb2\xa4\xbb\x52\xc5\xe6\xb7\x5f\xcb\x3f\xff\xec\xff\xd0\xdb\x9b\x6a\xe7\xf6\xa6\xad\x73\xfc\x65\x4e\x60\x76\x0f\xfe\x22\x00\xf2\x7d\xb6\x0a\x56\x10\x89\x34\xa3\x9c\xa1\xb2\x6a\x3d\x16\x7b\x70\xf8\xe5\x39\x8b\xe1\x71\x39\x7b\x18\x2f\x9f\xe0\x1b\x79\x32\x5a\x3d\x4e\x53\x3c\x08\x69\xfc\x5b\x5b\x7d\xfe\x7a\x3e\xb7\xe7\xaa\xe0\x51\x48\xe3\x58\x7a\xf5\xf9\xda\x9f\xfd\xb1\x26\x07\x31\xb8\xba\x80\x8a\xb8\x8a\xde\x0f\x0a\xea\x7b\x30\xdc\xe4\x1a\x94\x66\x49\x02\x3b\xca\x35\x30\x0d\x39\x67\x7f\xe5\x38\xb2\x51\xb2\x37\x91\xb1\xf0\x15\x0b\xcf\x9a\xb8\x84\xee\xef\xea\x02\x72\x85\x31\x6c\x8c\x89\x2a\x2c\xf6\x51\xd9\xd0\x92\x2b\x94\xa1\xf1\x9a\x71\x87\x12\xa3\xe5\x20\xf6\xfc\x0a\x91\xe0\x4a\x4b\xca\xb8\x86\x61\x44\x39\x6c\xd0\x7a\xb4\x7f\x18\x8d\x34\x7b\xab\xd1\xd9\x08\x91\x20\xe5\x16\x95\xc8\xa6\x4c\x1c\x52\x6d\x4e\x35\x4b\x51\x69\x9a\x66\xf6\x2c\xcf\x62\xd7\x99\xa1\xae\x62\xae\x02\x70\xe6\x4f\xc9\x77\x58\xf8\x4d\xd6\x12\xb1\x43\x39\x34\xa4\x8c\xce\x50\xed\xd9\x1c\x50\x9e\x8b\xe9\xf7\x50\xed\xe2\xba\xce\x2a\x2b\xd6\x4d\xb2\x96\x2c\x4d\x12\xb1\x0b\x0d\x9a\x5e\x0f\x1c\xc1\x35\x72\x1d\xbe\x50\xf5\xe2\x95\x76\x5a\xfb\x91\xc8\xb9\xb6\x14\xe1\x16\x65\xeb\xc8\x20\xe7\x75\x01\x6d\x83\x7d\x12\xed\x77\xc1\x5d\x02\xf7\xe3\x58\x87\x29\x6a\x6a\xca\x5e\x85\x79\xb9\x69\x90\xb7\x70\x2f\xc9\x3d\x59\x12\x7f\x42\x1a\xdc\x2c\x7c\x98\x92\x39\x09\x08\x4c\xc6\xab\xc9\x78\x4a\xec\x9b\x6d\x9c\xd7\x1c\xd8\xad\x37\x9a\xe4\xe8\x35\xb7\x1a\xec\xc1\xf0\x60\xeb\xb2\xbc\x3e\x3a\x57\x09\x3c\x4d\xb7\xce\xe0\x50\x28\x4d\x95\x3f\x19\x1c\x47\xd3\xdc\x42\x16\x99\xe6\xb0\x29\x4c\xf6\xbc\x21\x37\x3d\xa4\xca\x97\x18\x55\x24\x59\x66\x76\xbc\x06\xed\x4d\xfa\x4e\x90\xd7\xa2\xee\x1d\x6c\x34\x1c\xd4\x74\xbb\xcf\xfa\x16\x0d\xa5\x88\x9b\x84\xff\xca\x5e\x9b\x97\xca\xf2\x65\x43\xdf\x79\x6a\x54\xbe\xa9\x81\xda\xbb\xa0\xf2\x4d\x78\xe0\xc9\x99\xbf\x87\x17\xd7\x22\xef\x8f\xb9\xb2\xc6\x14\xd5\xf5\xde\xe5\xba\x04\x1d\xbb\x7f\xae\x4f\xb4\xb8\x3f\x90\xff\x53\x4b\xa8\x39\x9b\x2c\xfc\x55\xb0\x1c\xcf\xfc\xa0\xc4\x8c\x26\xba\xec\x1b\x65\xb8\xb6\x33\xa5\xe1\xf4\xe8\x54\x41\x68\xf2\xf1\x43\x75\x61\x6b\x9a\x87\xbb\x06\xff\x7c\x0a\xad\xb1\x70\x5f\x3c\xfa\x14\xec\xe7\x8b\x52\x79\x6b\xda\xb0\xe7\x19\x2d\x12\x41\xe3\x6e\xe9\x51\x22\x97\x51\x4d\x91\x3b\x6d\x8f\x73\x50\x22\x10\xda\x97\xb3\x38\xb4\xcb\x57\x2c\x8e\x73\x72\xf0\xe2\x7c\xa2\xd8\xe8\x61\xba\x70\x00\x7c\xa4\x8c\x35\xd3\xa8\x0f\x6f\x3b\xef\x8e\xd4\x85\x3c\x8a\x50\xa9\x5e\x57\x4b\x51\x29\xba\xc5\x23\xd8\xc7\x79\x39\x4d\xf7\x63\xb9\x89\xe3\xbb\x4b\x9c\x19\x50\x9c\x33\xdc\x09\xd7\xcd\x1d\x47\x96\x76\xcb\x78\x19\x09\x4a\xed\x84\x8c\xdb\xa2\x65\x10\xa5\x94\x25\x2d\x8b\x7d\x67\x9f\x99\x54\x3a\x6c\xda\xea\xcb\x24\xb4\x23\xe2\x90\xc9\x5e\x04\xc7\x9e\x2d\x47\xdd\xe8\x72\x61\x95\x27\x62\xcb\x78\xfd\x80\x16\xe6\x7b\xff\xc2\xe8\x85\xf2\x2d\xc6\x5e\xe7\x5c\x8b\x57\xe4\x6e\xc3\xe6\xc3\xa4\x0d\x78\x7b\x4e\x69\x56\x51\x67\x90\x39\x2b\xe9\x92\xac\x82\xe5\x6c\x12\xb8\xe6\x99\x73\x23\x4d\x77\xaa\x39\xdd\x5a\x50\x6b\xc6\x5b\x9d\xdf\x00\xd7\xea\x5a\x53\x72\x3f\x5e\xcf\x03\x08\x96\x6b\x62\xbb\xba\xe0\x49\x01\x76\xa0\x03\xc1\x11\xa4\xd8\xed\x67\xea\xc3\xc7\x9a\xd7\xfb\x72\xbb\x6c\x48\x38\xdb\xe8\xff\x8a\x44\xaf\x17\x54\x8e\x87\x8a\xf1\x6d\x82\xda\xa4\xe2\xe4\x77\x32\xf9\x06\x43\x16\x8f\x6a\x2f\x8d\xcf\xa5\xab\x18\x1b\x27\x0d\x9e\xe3\x79\x40\x96\x15\x9c\xf5\x9b\x07\xc6\xda\x78\x3a\x6d\x1a\x69\x7d\x3b\xdc\x2f\x96\x64\xf6\xd5\x2f\xe7\x80\xe6\xc7\xc7\xa8\x05\x82\xcd\x64\x17\x00\x86\xc8\xc5\xc3\xc3\x2c\xf8\x3c\xf8\x37\x00\x00\xff\xff\xc0\xab\x71\x57\xbf\x0f\x00\x00")

func _0001_createTablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createTablesUpSql,
		"0001_create-tables.up.sql",
	)
}

func _0001_createTablesUpSql() (*asset, error) {
	bytes, err := _0001_createTablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create-tables.up.sql", size: 4031, mode: os.FileMode(438), modTime: time.Unix(1589851643, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create-tables.up.sql": _0001_createTablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create-tables.up.sql": &bintree{_0001_createTablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
