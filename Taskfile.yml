# Sandpiper cross-platform build/test/deploy file (using https://taskfile.dev)

# Copyright The Sandpiper Authors. All rights reserved.
# Use of this source code is governed by an MIT-style license that can
# be found in the LICENSE.md file.

version: '2'

vars:
  REPO:
    github.com/sandpiper-framework/sandpiper
  GO_PACKAGES:
    sh: go list ./...

tasks:
  create-pub-db:
    desc: Create the publishing database from default postgresql installation using "psql"
    dir: pkg/api/migrations
    cmds:
      - "{{.PSQLCMD}}"
    vars:
      PSQLCMD:
        '{{if eq OS "linux"}}sudo -u postgres {{end}}psql --username=postgres --file=db_create.sql --quiet'

  create-sub-db:
    desc: Create the subscribing database from default postgresql installation using "psql"
    dir: pkg/api/migrations
    cmds:
      - "{{.PSQLCMD}}"
    vars:
      PSQLCMD:
        '{{if eq OS "linux"}}sudo -u postgres {{end}}psql --username=postgres --file=db_create_sub.sql --quiet'

  create-both-db:
    desc: Create both databases
    deps: [create-pub-db, create-sub-db]

  update:
    desc: Get the latest Sandpiper server repo
    cmds:
      - go get -u {{.REPO}}

  packages:
    cmds:
      - echo '{{.GO_PACKAGES}}'
    silent: true

  go-bindata:
    desc: Add go-bindata dependency and install it if necessary
    cmds:
      - go get -u github.com/go-bindata/go-bindata/...
    silent: true

  bindata-api:
    desc: Use go-bindata to encode file migrations in a go source file
    dir: pkg/api/migrations
    deps: [go-bindata]
    cmds:
      - go-bindata -ignore "^[^0-9]{4}.+$" -pkg migrations .

  build-api:
    desc: Build sandpiper primary server
    dir: cmd/api
    deps: [bindata-api]
    cmds:
      - go build -v -o {{.EXE}} -ldflags="-X autocare.org/sandpiper/pkg/api/version.Version={{.VER}}"
    vars:
      EXE: api{{exeExt}}
      VER: {sh: git describe --always --long --dirty}

  build-cli:
    desc: Build sandpiper cli command
    dir: cmd/cli
    cmds:
      - go build -v -o {{.EXE}} -ldflags="-X autocare.org/sandpiper/pkg/cli/version.Version={{.VER}}"
    vars:
      EXE: sandpiper{{exeExt}}
      VER: {sh: git describe --always --long --dirty}

  build:
    desc: Build all sandpiper executables
    deps: [build-api, build-cli]

  test:
    desc: Run test suite (having trouble with dockertesting under Windows!)
    cmds:
      - echo " *** Running Coverage Tests ***"
      - go test -v -race -coverprofile=profile.out -covermode=atomic ./...
      - sh: cat profile.out >> coverage.txt
      - sh: docker stop $(docker ps -a -q)
      - echo " *** Completed *** "
    vars:
      # couldn't get "preconditions" to work, but this will fail if docker is not running
      DOCKER_RUNNING: {sh: docker ps -q}
    silent: true

  server:
    desc: Launch sandpiper primary (publication) server
    dir: cmd/api
    cmds:
      - ./api

  release-docker:
    desc: Create a docker file for release
    deps: [build]
    cmds:
      - docker build . -t sandpiper
    preconditions:
      - test -f Dockerfile

  clean-docker:
    desc: Remove any unused docker images (FIX THIS!!!)
    cmds:
      # docker ps -a -q -f status=exited | xargs docker rm
      # docker images --no-trunc=true --filter dangling=true --quiet | xargs docker rmi
      - sh: docker stop $(docker ps -a -q)
      - sh: docker rm $(docker ps -a -q)
      - sh: docker volume rm $(docker volume ls -qf dangling=true)
